#!/usr/bin/env python3
"""
ETF Analytics - Demo script showing package usage.
"""

import logging
from datetime import datetime

from ETFAnalytics import ETFAnalyticsEngine, ValidationError, CalculationError, ConvergenceError

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def main():
    """Demonstrate ETF Analytics package functionality."""
    try:
        sample_holdings = [
            {
                'bond_id': 'CORP001',
                'cusip': '12345678',
                'isin': 'US1234567890',
                'coupon_rate': 0.045,
                'maturity_date': datetime(2030, 12, 15),
                'issue_date': datetime(2020, 12, 15),
                'par_amount': 1000000.0,
                'payment_frequency': 2,
                'day_count_convention': '30/360',
                'currency': 'USD',
                'country': 'US',
                'clean_price': 98.75,
                'accrued_interest': 1.125,
                'market_date': datetime(2025, 6, 19)
            },
            {
                'bond_id': 'CORP002',
                'cusip': '87654321',
                'isin': 'US0987654321',
                'coupon_rate': 0.0375,
                'maturity_date': datetime(2028, 6, 30),
                'issue_date': datetime(2018, 6, 30),
                'par_amount': 1500000.0,
                'payment_frequency': 2,
                'day_count_convention': '30/360',
                'currency': 'USD',
                'country': 'US',
                'clean_price': 102.25,
                'accrued_interest': 0.9375,
                'market_date': datetime(2025, 6, 19)
            }
        ]
        
        parameters = {'calculation_date': datetime(2025, 6, 19)}
        
        yield_curves = {
            'USD': {
                'tenors': [0.25, 0.5, 1, 2, 3, 5, 7, 10, 30],
                'rates': [0.042, 0.043, 0.045, 0.046, 0.047, 0.048, 0.049, 0.05, 0.052],
                'curve_date': datetime(2025, 6, 19)
            }
        }
        
        print("Initializing ETF Analytics Engine...")
        engine = ETFAnalyticsEngine(sample_holdings, parameters, yield_curves)
        analytics = engine.get_complete_analytics()
        
        print("\n" + "="*70)
        print("ETF FIXED INCOME ANALYTICS RESULTS")
        print("="*70)
        print(f"Calculation Date: {analytics.calculation_date.strftime('%Y-%m-%d')}")
        print(f"Portfolio Value: ${analytics.risk_metrics.portfolio_value:,.2f}\n")
        
        print("SUMMARY TABLE:")
        print(engine.export_summary_dataframe().to_string(index=False))
        
        print("\nDETAILED BOND ANALYTICS:")
        print(engine.export_detailed_dataframe().to_string(index=False))
        
        print("\nRETURN DECOMPOSITION (30-day horizon):")
        return_decomp = engine.decompose_total_return(30)
        print(f"  Carry Return:        {return_decomp.carry_return*100:,.4f}%")
        print(f"  Roll Return:         {return_decomp.roll_return*100:,.4f}%")
        print(f"  Price Return:        {return_decomp.price_return*100:,.4f}%")
        print(f"  ------------------------------------")
        print(f"  Total Ex-Ante Return:{return_decomp.total_return*100:,.4f}%")
        
        print("\n" + "="*70)
        print("ANALYSIS COMPLETED SUCCESSFULLY")
        print("="*70)
        
    except (ValidationError, CalculationError, ConvergenceError) as e:
        logger.error(f"Analytics failed: {e}", exc_info=True)
        print(f"\n❌ ERROR: {e}")
    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}", exc_info=True)
        print(f"\n❌ UNEXPECTED ERROR: {e}")


if __name__ == "__main__":
    main()
