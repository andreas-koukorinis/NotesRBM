is this version 5.0.0 <input>"""
ETF Fixed Income Analytics Package - Production Ready (Refactored)

A comprehensive, enterprise-grade package for ETF fixed income analytics with:
- Strict input validation at boundaries
- Immutable data structures
- Clear separation of concerns
- Predictable, strongly-typed interfaces
- Comprehensive error handling and corrected financial logic

Author: Analytics Team
Version: 5.0.0 (Corrected)
"""

import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
from enum import Enum
from datetime import datetime, date
from scipy.optimize import brentq
import logging

# Configure logging
logger = logging.getLogger(__name__)

# ============================================================================
# ENUMS AND EXCEPTIONS
# ============================================================================

class DayCountConvention(Enum):
    """Standard day count conventions for bond calculations."""
    THIRTY_360 = "30/360"
    ACT_360 = "ACT/360"
    ACT_365 = "ACT/365"
    ACT_ACT = "ACT/ACT"

class PaymentFrequency(Enum):
    """Bond payment frequencies."""
    ANNUAL = 1
    SEMI_ANNUAL = 2
    QUARTERLY = 4
    MONTHLY = 12

class Currency(Enum):
    """Supported currencies."""
    USD = "USD"
    EUR = "EUR"
    GBP = "GBP"
    JPY = "JPY"
    CAD = "CAD"
    AUD = "AUD"

class ValidationError(Exception):
    """Raised when input validation fails."""
    pass

class CalculationError(Exception):
    """Raised when business logic calculation fails."""
    pass

class ConvergenceError(Exception):
    """Raised when numerical methods fail to converge."""
    pass

# ============================================================================
# VALIDATED DATA STRUCTURES
# ============================================================================

@dataclass(frozen=True)
class ValidatedBondIdentifier:
    """Immutable, validated bond identification."""
    bond_id: str
    cusip: str
    isin: str

@dataclass(frozen=True)
class ValidatedBondCharacteristics:
    """Immutable, validated bond characteristics."""
    coupon_rate: float
    maturity_date: datetime
    issue_date: datetime
    par_amount: float
    payment_frequency: PaymentFrequency
    day_count_convention: DayCountConvention
    currency: Currency
    country: str

@dataclass(frozen=True)
class ValidatedMarketData:
    """Immutable, validated market data."""
    clean_price: float
    accrued_interest: float
    market_date: datetime
    
    @property
    def dirty_price(self) -> float:
        """Calculate dirty price from validated components."""
        return self.clean_price + self.accrued_interest

@dataclass(frozen=True)
class ValidatedBondHolding:
    """Complete validated bond holding."""
    identifier: ValidatedBondIdentifier
    characteristics: ValidatedBondCharacteristics
    market_data: ValidatedMarketData
    
    @property
    def market_value(self) -> float:
        """Calculate market value from validated components."""
        # Market value is based on a par amount of 100 for price quotes
        return (self.market_data.dirty_price / 100.0) * self.characteristics.par_amount

@dataclass(frozen=True)
class ValidatedYieldCurveData:
    """Immutable, validated yield curve data."""
    currency: Currency
    tenors: Tuple[float, ...]
    rates: Tuple[float, ...]
    curve_date: datetime

@dataclass(frozen=True)
class ValidatedCalculationParameters:
    """Immutable, validated calculation parameters."""
    calculation_date: datetime
    yield_convergence_tolerance: float
    max_iterations: int
    yield_solver_bounds: Tuple[float, float]

# ============================================================================
# BUSINESS RESULT TYPES
# ============================================================================

@dataclass(frozen=True)
class CashFlow:
    """Individual cash flow result."""
    date: datetime
    amount: float
    time_to_payment: float
    is_principal: bool

@dataclass(frozen=True)
class BondAnalyticsResult:
    """Complete bond analytics results."""
    bond_id: str
    yield_to_maturity: float
    modified_duration: float
    convexity: float
    cash_flows: Tuple[CashFlow, ...]

@dataclass(frozen=True)
class PortfolioWeight:
    """Portfolio weight result."""
    bond_id: str
    weight: float
    market_value: float

@dataclass(frozen=True)
class ACFResult:
    """ACF method calculation results."""
    portfolio_yield: float
    modified_duration: float
    weighted_average_life: float
    # Stores [total_amount, principal_amount]
    aggregated_cash_flows: Dict[float, List[float]]

@dataclass(frozen=True)
class WAResult:
    """Weighted Average method calculation results."""
    portfolio_yield: float
    modified_duration: float
    weighted_average_life: float

@dataclass(frozen=True)
class RiskMetrics:
    """Portfolio risk metrics."""
    cr01: float
    spread_duration: float
    portfolio_value: float
    weighted_average_spread: float

@dataclass(frozen=True)
class ReturnDecomposition:
    """Total return decomposition."""
    carry_return: float
    roll_return: float
    price_return: float
    total_return: float
    time_horizon_days: int

@dataclass(frozen=True)
class PortfolioAnalytics:
    """Complete portfolio analytics results."""
    acf_method: ACFResult
    wa_method: WAResult
    risk_metrics: RiskMetrics
    portfolio_weights: Tuple[PortfolioWeight, ...]
    bond_analytics: Tuple[BondAnalyticsResult, ...]
    calculation_date: datetime

# ============================================================================
# INPUT VALIDATORS (Code remains the same, omitted for brevity)
# ============================================================================
class InputValidator:
    @staticmethod
    def validate_bond_identifier(bond_id: str, cusip: str, isin: str) -> ValidatedBondIdentifier:
        if not isinstance(bond_id, str) or not bond_id.strip(): raise ValidationError("Bond ID must be non-empty string")
        if not isinstance(cusip, str) or not cusip.strip(): raise ValidationError("CUSIP must be non-empty string")
        if not isinstance(isin, str) or not isin.strip(): raise ValidationError("ISIN must be non-empty string")
        return ValidatedBondIdentifier(bond_id=bond_id.strip(), cusip=cusip.strip(), isin=isin.strip())

    @staticmethod
    def validate_bond_characteristics(coupon_rate: float, maturity_date: datetime, issue_date: datetime, par_amount: float, payment_frequency: int, day_count_convention: str, currency: str, country: str) -> ValidatedBondCharacteristics:
        if not isinstance(coupon_rate, (int, float)) or coupon_rate < 0: raise ValidationError(f"Coupon rate must be non-negative number, got {coupon_rate}")
        if not isinstance(par_amount, (int, float)) or par_amount <= 0: raise ValidationError(f"Par amount must be positive number, got {par_amount}")
        if not isinstance(maturity_date, datetime): raise ValidationError("Maturity date must be datetime object")
        if not isinstance(issue_date, datetime): raise ValidationError("Issue date must be datetime object")
        if maturity_date <= issue_date: raise ValidationError("Maturity date must be after issue date")
        try: freq_enum = PaymentFrequency(payment_frequency)
        except ValueError: raise ValidationError(f"Invalid payment frequency: {payment_frequency}")
        try: convention_enum = DayCountConvention(day_count_convention)
        except ValueError: raise ValidationError(f"Invalid day count convention: {day_count_convention}")
        try: currency_enum = Currency(currency)
        except ValueError: raise ValidationError(f"Invalid currency: {currency}")
        if not isinstance(country, str) or not country.strip(): raise ValidationError("Country must be non-empty string")
        return ValidatedBondCharacteristics(coupon_rate=float(coupon_rate), maturity_date=maturity_date, issue_date=issue_date, par_amount=float(par_amount), payment_frequency=freq_enum, day_count_convention=convention_enum, currency=currency_enum, country=country.strip())

    @staticmethod
    def validate_market_data(clean_price: float, accrued_interest: float, market_date: datetime) -> ValidatedMarketData:
        if not isinstance(clean_price, (int, float)) or clean_price <= 0: raise ValidationError(f"Clean price must be positive number, got {clean_price}")
        if not isinstance(accrued_interest, (int, float)) or accrued_interest < 0: raise ValidationError(f"Accrued interest must be non-negative, got {accrued_interest}")
        if not isinstance(market_date, datetime): raise ValidationError("Market date must be datetime object")
        return ValidatedMarketData(clean_price=float(clean_price), accrued_interest=float(accrued_interest), market_date=market_date)

    @staticmethod
    def validate_calculation_parameters(calculation_date: datetime, yield_convergence_tolerance: float, max_iterations: int, yield_solver_bounds: Tuple[float, float]) -> ValidatedCalculationParameters:
        if not isinstance(calculation_date, datetime): raise ValidationError("Calculation date must be datetime object")
        if not isinstance(yield_convergence_tolerance, (int, float)) or yield_convergence_tolerance <= 0: raise ValidationError("Yield convergence tolerance must be positive number")
        if not isinstance(max_iterations, int) or max_iterations <= 0: raise ValidationError("Max iterations must be positive integer")
        if not isinstance(yield_solver_bounds, tuple) or len(yield_solver_bounds) != 2 or not all(isinstance(x, (int, float)) for x in yield_solver_bounds): raise ValidationError("Yield solver bounds must be a tuple of two numbers")
        return ValidatedCalculationParameters(calculation_date=calculation_date, yield_convergence_tolerance=float(yield_convergence_tolerance), max_iterations=max_iterations, yield_solver_bounds=yield_solver_bounds)

    @staticmethod
    def validate_yield_curve_data(currency: str, tenors: List[float], rates: List[float], curve_date: datetime) -> ValidatedYieldCurveData:
        try: currency_enum = Currency(currency)
        except ValueError: raise ValidationError(f"Invalid currency: {currency}")
        if not isinstance(curve_date, datetime): raise ValidationError("Curve date must be datetime object")
        if not isinstance(tenors, list) or len(tenors) < 2: raise ValidationError("Tenors must be list with at least 2 points")
        if not isinstance(rates, list) or len(rates) != len(tenors): raise ValidationError("Rates must be list same length as tenors")
        validated_tenors = [float(t) for t in tenors]
        validated_rates = [float(r) for r in rates]
        if not all(t1 < t2 for t1, t2 in zip(validated_tenors[:-1], validated_tenors[1:])): raise ValidationError("Tenors must be in strictly ascending order")
        return ValidatedYieldCurveData(currency=currency_enum, tenors=tuple(validated_tenors), rates=tuple(validated_rates), curve_date=curve_date)

    @staticmethod
    def validate_holdings_portfolio(holdings: List[ValidatedBondHolding]) -> Tuple[ValidatedBondHolding, ...]:
        if not isinstance(holdings, list) or len(holdings) == 0: raise ValidationError("Holdings must be non-empty list")
        if not all(isinstance(h, ValidatedBondHolding) for h in holdings): raise ValidationError("All items in holdings must be ValidatedBondHolding")
        bond_ids = [h.identifier.bond_id for h in holdings]
        if len(bond_ids) != len(set(bond_ids)): raise ValidationError("All bond IDs must be unique in portfolio")
        if sum(h.market_value for h in holdings) <= 0: raise ValidationError("Portfolio total value must be positive")
        return tuple(holdings)

# ============================================================================
# BUSINESS LOGIC CALCULATORS
# ============================================================================

class DayCountCalculator:
    """Day count fraction calculations. Assumes validated inputs."""
    
    @staticmethod
    def calculate_year_fraction(start_date: datetime, end_date: datetime,
                               convention: DayCountConvention) -> float:
        if convention == DayCountConvention.THIRTY_360:
            return DayCountCalculator._calculate_30_360(start_date, end_date)
        elif convention == DayCountConvention.ACT_360:
            return (end_date - start_date).days / 360.0
        elif convention == DayCountConvention.ACT_365:
            return (end_date - start_date).days / 365.0
        elif convention == DayCountConvention.ACT_ACT:
            # A more precise implementation would handle leap years specifically.
            # This approximation is common.
            return (end_date - start_date).days / 365.25
        else:
            raise CalculationError(f"Unsupported day count convention: {convention}")
    
    @staticmethod
    def _calculate_30_360(start_date: datetime, end_date: datetime) -> float:
        y1, m1, d1 = start_date.year, start_date.month, start_date.day
        y2, m2, d2 = end_date.year, end_date.month, end_date.day
        if d1 == 31: d1 = 30
        if d2 == 31 and d1 == 30: d2 = 30
        return ((y2 - y1) * 360 + (m2 - m1) * 30 + (d2 - d1)) / 360.0

class YieldCurveInterpolator:
    """Yield curve interpolation. Assumes validated data."""
    def __init__(self, curve_data: ValidatedYieldCurveData):
        self.curve_data = curve_data
    
    def interpolate_rate(self, tenor: float) -> float:
        return float(np.interp(tenor, self.curve_data.tenors, self.curve_data.rates))

class CashFlowGenerator:
    """Generates bond cash flows. Assumes validated inputs."""
    def __init__(self, calculation_date: datetime):
        self.calculation_date = calculation_date
    
    def generate_cash_flows(self, bond: ValidatedBondHolding) -> Tuple[CashFlow, ...]:
        payment_dates = self._generate_payment_dates(bond.characteristics)
        frequency = bond.characteristics.payment_frequency.value
        # Coupon amount is per payment, not annualized
        coupon_amount = (bond.characteristics.par_amount * bond.characteristics.coupon_rate / frequency)
        
        cash_flows = []
        for payment_date in payment_dates:
            if payment_date > self.calculation_date:
                time_to_payment = DayCountCalculator.calculate_year_fraction(
                    self.calculation_date, payment_date, bond.characteristics.day_count_convention)
                
                is_principal = (payment_date == bond.characteristics.maturity_date)
                amount = coupon_amount
                if is_principal:
                    amount += bond.characteristics.par_amount
                
                cash_flows.append(CashFlow(
                    date=payment_date, amount=amount, time_to_payment=time_to_payment,
                    # We need to identify the principal portion of the final cash flow
                    is_principal=(is_principal and bond.characteristics.par_amount > 0)
                ))
        return tuple(cash_flows)
    
    def _generate_payment_dates(self, characteristics: ValidatedBondCharacteristics) -> List[datetime]:
        payment_dates = []
        frequency = characteristics.payment_frequency.value
        months_between = 12 // frequency
        current_date = characteristics.maturity_date
        # Using dateutil.relativedelta would be more robust for complex date logic
        while current_date >= characteristics.issue_date:
            payment_dates.append(current_date)
            year_delta, month_delta = divmod(months_between, 12)
            current_date = current_date.replace(year=current_date.year - year_delta)
            if current_date.month <= month_delta:
                current_date = current_date.replace(year=current_date.year - 1, month=current_date.month + 12 - month_delta)
            else:
                current_date = current_date.replace(month=current_date.month - month_delta)
        return sorted(payment_dates)

class YieldSolver:
    """Numerical yield calculations. Assumes validated inputs."""
    def __init__(self, parameters: ValidatedCalculationParameters):
        self.parameters = parameters
    
    def solve_bond_ytm(self, cash_flows: Tuple[CashFlow, ...], dirty_price: float) -> float:
        """Solve yield to maturity using Brent's method."""
        def price_function(ytm: float) -> float:
            # Prices are quoted per 100 par, so cash flows are scaled accordingly
            par_amount = next((cf.amount for cf in reversed(cash_flows) if cf.is_principal), 100.0)
            calculated_price = sum(
                (cf.amount / par_amount * 100.0) / (1 + ytm) ** cf.time_to_payment
                for cf in cash_flows
            )
            return calculated_price - dirty_price
        
        try:
            ytm = brentq(
                price_function, self.parameters.yield_solver_bounds[0], self.parameters.yield_solver_bounds[1],
                xtol=self.parameters.yield_convergence_tolerance, maxiter=self.parameters.max_iterations)
            return ytm
        except (ValueError, RuntimeError) as e:
            raise ConvergenceError(f"Bond YTM solution failed: {e}")
    
    def solve_portfolio_yield(self, aggregated_cash_flows: Dict[float, List[float]]) -> float:
        """
        Solve portfolio yield using Brent's method.
        The target price is 1.0 because cash flows are weighted by portfolio weights.
        """
        def price_function(y: float) -> float:
            # aggregated_cash_flows stores [total_amount, principal_amount]
            # We use total_amount for pricing.
            return sum(cf_amounts[0] / (1 + y) ** time
                      for time, cf_amounts in aggregated_cash_flows.items()) - 1.0
        
        try:
            ytm = brentq(
                price_function, self.parameters.yield_solver_bounds[0], self.parameters.yield_solver_bounds[1],
                xtol=self.parameters.yield_convergence_tolerance, maxiter=self.parameters.max_iterations)
            return ytm
        except (ValueError, RuntimeError) as e:
            raise ConvergenceError(f"Portfolio ACF yield solution failed: {e}")

class BondAnalyticsCalculator:
    """Individual bond analytics. Assumes validated inputs."""
    def __init__(self, cash_flow_generator: CashFlowGenerator, yield_solver: YieldSolver):
        self.cash_flow_generator = cash_flow_generator
        self.yield_solver = yield_solver
    
    def calculate_analytics(self, bond: ValidatedBondHolding) -> BondAnalyticsResult:
        try:
            cash_flows = self.cash_flow_generator.generate_cash_flows(bond)
            # Price is quoted per 100 par for YTM calculation
            ytm = self.yield_solver.solve_bond_ytm(cash_flows, bond.market_data.dirty_price)
            modified_duration = self._calculate_modified_duration(cash_flows, ytm, bond)
            convexity = self._calculate_convexity(cash_flows, ytm, bond)
            return BondAnalyticsResult(
                bond_id=bond.identifier.bond_id, yield_to_maturity=ytm,
                modified_duration=modified_duration, convexity=convexity, cash_flows=cash_flows)
        except ConvergenceError: raise
        except Exception as e: raise CalculationError(f"Bond analytics failed for {bond.identifier.bond_id}: {e}")
    
    def _calculate_modified_duration(self, cash_flows: Tuple[CashFlow, ...], ytm: float, bond: ValidatedBondHolding) -> float:
        """Calculate modified duration using the standard formula for an effective annual yield."""
        price = bond.market_data.dirty_price * bond.characteristics.par_amount / 100.0
        if price <= 0: return 0.0
        
        macaulay_duration_times_price = sum(
            cf.time_to_payment * cf.amount / (1 + ytm) ** cf.time_to_payment
            for cf in cash_flows)
        
        macaulay_duration = macaulay_duration_times_price / price
        return macaulay_duration / (1 + ytm)
    
    def _calculate_convexity(self, cash_flows: Tuple[CashFlow, ...], ytm: float, bond: ValidatedBondHolding) -> float:
        """Calculate convexity using the standard formula for an effective annual yield."""
        price = bond.market_data.dirty_price * bond.characteristics.par_amount / 100.0
        if price <= 0: return 0.0
        
        convexity_sum = sum(
            cf.amount * cf.time_to_payment * (cf.time_to_payment + 1) /
            (1 + ytm) ** (cf.time_to_payment + 2)
            for cf in cash_flows)
        return convexity_sum / price

class PortfolioWeightCalculator:
    """Portfolio weight calculations. Assumes validated inputs."""
    @staticmethod
    def calculate_weights(holdings: Tuple[ValidatedBondHolding, ...]) -> Tuple[PortfolioWeight, ...]:
        total_value = sum(holding.market_value for holding in holdings)
        if total_value <= 0: return tuple()
        return tuple(
            PortfolioWeight(
                bond_id=holding.identifier.bond_id,
                weight=holding.market_value / total_value,
                market_value=holding.market_value)
            for holding in holdings)

class ACFCalculator:
    """ACF method calculations. Assumes validated inputs."""
    def __init__(self, yield_solver: YieldSolver):
        self.yield_solver = yield_solver
    
    def calculate_acf_analytics(self, bond_analytics: Tuple[BondAnalyticsResult, ...], weights: Tuple[PortfolioWeight, ...], holdings: Tuple[ValidatedBondHolding, ...]) -> ACFResult:
        try:
            weight_lookup = {w.bond_id: w.weight for w in weights}
            holdings_lookup = {h.identifier.bond_id: h for h in holdings}
            
            # Aggregate cash flows by time, tracking total and principal amounts
            aggregated_cf: Dict[float, List[float]] = {}
            
            for bond_result in bond_analytics:
                weight = weight_lookup.get(bond_result.bond_id)
                holding = holdings_lookup.get(bond_result.bond_id)
                if weight is None or holding is None: continue

                for cf in bond_result.cash_flows:
                    time_key = round(cf.time_to_payment, 6)
                    if time_key not in aggregated_cf:
                        aggregated_cf[time_key] = [0.0, 0.0]  # [total_amount, principal_amount]
                    
                    # Scale cash flow by portfolio weight
                    scaled_amount = (cf.amount / holding.characteristics.par_amount) * weight
                    aggregated_cf[time_key][0] += scaled_amount
                    
                    if cf.is_principal:
                        scaled_principal = (holding.characteristics.par_amount / holding.characteristics.par_amount) * weight
                        aggregated_cf[time_key][1] += scaled_principal

            portfolio_yield = self.yield_solver.solve_portfolio_yield(aggregated_cf)
            modified_duration = self._calculate_acf_duration(aggregated_cf, portfolio_yield)
            wal = self._calculate_acf_wal(aggregated_cf)
            
            return ACFResult(
                portfolio_yield=portfolio_yield, modified_duration=modified_duration,
                weighted_average_life=wal, aggregated_cash_flows=aggregated_cf)
        except ConvergenceError: raise
        except Exception as e: raise CalculationError(f"ACF calculation failed: {e}")
    
    def _calculate_acf_duration(self, aggregated_cf: Dict[float, List[float]], portfolio_yield: float) -> float:
        """Calculate ACF modified duration."""
        macaulay_duration_times_price = sum(
            time * cf_amounts[0] / (1 + portfolio_yield) ** time
            for time, cf_amounts in aggregated_cf.items())
        
        price = sum(
            cf_amounts[0] / (1 + portfolio_yield) ** time
            for time, cf_amounts in aggregated_cf.items())
        
        if price <= 0: return 0.0
        macaulay_duration = macaulay_duration_times_price / price
        return macaulay_duration / (1 + portfolio_yield)
    
    def _calculate_acf_wal(self, aggregated_cf: Dict[float, List[float]]) -> float:
        """Calculate ACF weighted average life using only principal cash flows."""
        total_principal = sum(cf_amounts[1] for cf_amounts in aggregated_cf.values())
        if total_principal <= 0: return 0.0
        
        weighted_time = sum(time * cf_amounts[1] for time, cf_amounts in aggregated_cf.items())
        return weighted_time / total_principal

class WACalculator:
    """Weighted Average method calculations. Assumes validated inputs."""
    @staticmethod
    def calculate_wa_analytics(bond_analytics: Tuple[BondAnalyticsResult, ...], weights: Tuple[PortfolioWeight, ...], holdings: Tuple[ValidatedBondHolding, ...], calculation_date: datetime) -> WAResult:
        weight_lookup = {w.bond_id: w.weight for w in weights}
        analytics_lookup = {ba.bond_id: ba for ba in bond_analytics}
        wa_yield, wa_duration, wa_wal = 0.0, 0.0, 0.0
        
        for holding in holdings:
            bond_id = holding.identifier.bond_id
            weight = weight_lookup.get(bond_id, 0.0)
            analytics = analytics_lookup.get(bond_id)
            if not analytics: continue
            
            time_to_maturity = DayCountCalculator.calculate_year_fraction(
                calculation_date, holding.characteristics.maturity_date,
                holding.characteristics.day_count_convention)
            
            wa_yield += weight * analytics.yield_to_maturity
            wa_duration += weight * analytics.modified_duration
            wa_wal += weight * time_to_maturity
        return WAResult(portfolio_yield=wa_yield, modified_duration=wa_duration, weighted_average_life=wa_wal)

class RiskMetricsCalculator:
    """Risk metrics calculations. Assumes validated inputs."""
    @staticmethod
    def calculate_risk_metrics(acf_result: ACFResult, portfolio_value: float) -> RiskMetrics:
        cr01 = acf_result.modified_duration * portfolio_value * 0.0001
        # Placeholder for spread data if it were added to ValidatedBondHolding
        wa_spread = 0.0
        return RiskMetrics(
            cr01=cr01, spread_duration=acf_result.modified_duration,
            portfolio_value=portfolio_value, weighted_average_spread=wa_spread)

class ReturnAttributionCalculator:
    """Return attribution calculations. Assumes validated inputs."""
    def __init__(self, yield_curves: Dict[Currency, YieldCurveInterpolator]):
        self.yield_curves = yield_curves
    
    def decompose_return(self, holdings: Tuple[ValidatedBondHolding, ...], weights: Tuple[PortfolioWeight, ...], bond_analytics: Tuple[BondAnalyticsResult, ...], calculation_date: datetime, time_horizon_days: int) -> ReturnDecomposition:
        carry = self._calculate_carry(bond_analytics, weights, time_horizon_days)
        roll = self._calculate_roll(holdings, weights, bond_analytics, calculation_date, time_horizon_days)
        price_return = 0.0  # Assumes no market movement for ex-ante analysis
        total_return = carry + roll + price_return
        return ReturnDecomposition(
            carry_return=carry, roll_return=roll, price_return=price_return,
            total_return=total_return, time_horizon_days=time_horizon_days)
    
    def _calculate_carry(self, bond_analytics: Tuple[BondAnalyticsResult, ...], weights: Tuple[PortfolioWeight, ...], time_horizon_days: int) -> float:
        """Calculate carry based on Yield-to-Maturity."""
        time_horizon_years = time_horizon_days / 365.0
        weight_lookup = {w.bond_id: w.weight for w in weights}
        analytics_lookup = {ba.bond_id: ba for ba in bond_analytics}
        
        total_carry = sum(
            weight_lookup.get(bond_id, 0.0) * analytics.yield_to_maturity * time_horizon_years
            for bond_id, analytics in analytics_lookup.items())
        return total_carry
    
    def _calculate_roll(self, holdings: Tuple[ValidatedBondHolding, ...], weights: Tuple[PortfolioWeight, ...], bond_analytics: Tuple[BondAnalyticsResult, ...], calculation_date: datetime, time_horizon_days: int) -> float:
        """Calculate roll by comparing points on the same yield curve."""
        time_horizon_years = time_horizon_days / 365.0
        weight_lookup = {w.bond_id: w.weight for w in weights}
        analytics_lookup = {ba.bond_id: ba for ba in bond_analytics}
        total_roll = 0.0
        
        for holding in holdings:
            bond_id = holding.identifier.bond_id
            weight = weight_lookup.get(bond_id, 0.0)
            analytics = analytics_lookup.get(bond_id)
            currency = holding.characteristics.currency
            if not analytics or currency not in self.yield_curves: continue
                
            curve = self.yield_curves[currency]
            current_maturity = DayCountCalculator.calculate_year_fraction(
                calculation_date, holding.characteristics.maturity_date,
                holding.characteristics.day_count_convention)
            future_maturity = current_maturity - time_horizon_years
            
            if future_maturity > 0:
                current_yield_on_curve = curve.interpolate_rate(current_maturity)
                future_yield_on_curve = curve.interpolate_rate(future_maturity)
                yield_change_from_roll = future_yield_on_curve - current_yield_on_curve
                # Use the actual bond's duration as the sensitivity measure
                roll_contribution = -weight * analytics.modified_duration * yield_change_from_roll
                total_roll += roll_contribution
        return total_roll

# ============================================================================
# MAIN ANALYTICS ENGINE
# ============================================================================

class ETFAnalyticsEngine:
    """Production-ready ETF analytics engine orchestrator."""
    def __init__(self, raw_holdings_data: List[Dict], raw_parameters: Dict, raw_yield_curves: Dict[str, Dict]):
        logger.info("Starting ETF analytics engine initialization")
        self.parameters = InputValidator.validate_calculation_parameters(
            raw_parameters['calculation_date'],
            raw_parameters.get('yield_convergence_tolerance', 1e-8),
            raw_parameters.get('max_iterations', 100),
            raw_parameters.get('yield_solver_bounds', (-0.5, 2.0))
        )
        
        validated_curves = {}
        for currency_str, curve_data in raw_yield_curves.items():
            validated_curve_data = InputValidator.validate_yield_curve_data(
                currency_str, curve_data['tenors'], curve_data['rates'], curve_data['curve_date'])
            validated_curves[validated_curve_data.currency] = YieldCurveInterpolator(validated_curve_data)
        self.yield_curves = validated_curves
        
        validated_holdings = []
        for holding_data in raw_holdings_data:
            identifier = InputValidator.validate_bond_identifier(
                holding_data['bond_id'], holding_data['cusip'], holding_data['isin'])
            characteristics = InputValidator.validate_bond_characteristics(
                holding_data['coupon_rate'], holding_data['maturity_date'], holding_data['issue_date'],
                holding_data['par_amount'], holding_data['payment_frequency'],
                holding_data['day_count_convention'], holding_data['currency'], holding_data['country'])
            market_data = InputValidator.validate_market_data(
                holding_data['clean_price'], holding_data['accrued_interest'], holding_data['market_date'])
            validated_holdings.append(ValidatedBondHolding(
                identifier=identifier, characteristics=characteristics, market_data=market_data))
        self.holdings = InputValidator.validate_holdings_portfolio(validated_holdings)
        
        self.cash_flow_generator = CashFlowGenerator(self.parameters.calculation_date)
        self.yield_solver = YieldSolver(self.parameters)
        self.bond_calculator = BondAnalyticsCalculator(self.cash_flow_generator, self.yield_solver)
        self.acf_calculator = ACFCalculator(self.yield_solver)
        self.attribution_calculator = ReturnAttributionCalculator(self.yield_curves)
        
        self._calculate_all_analytics()
        logger.info("ETF analytics engine initialization completed successfully")
    
    def _calculate_all_analytics(self):
        try:
            self.bond_analytics = tuple(self.bond_calculator.calculate_analytics(h) for h in self.holdings)
            self.weights = PortfolioWeightCalculator.calculate_weights(self.holdings)
            self.portfolio_value = sum(w.market_value for w in self.weights)
            self.acf_result = self.acf_calculator.calculate_acf_analytics(self.bond_analytics, self.weights, self.holdings)
            self.wa_result = WACalculator.calculate_wa_analytics(self.bond_analytics, self.weights, self.holdings, self.parameters.calculation_date)
            self.risk_metrics = RiskMetricsCalculator.calculate_risk_metrics(self.acf_result, self.portfolio_value)
        except Exception as e:
            logger.error(f"Portfolio analytics calculation failed: {e}", exc_info=True)
            raise CalculationError(f"Portfolio analytics calculation failed: {e}")
    
    def get_complete_analytics(self) -> PortfolioAnalytics:
        return PortfolioAnalytics(
            acf_method=self.acf_result, wa_method=self.wa_result, risk_metrics=self.risk_metrics,
            portfolio_weights=self.weights, bond_analytics=self.bond_analytics,
            calculation_date=self.parameters.calculation_date)
    
    def decompose_total_return(self, time_horizon_days: int) -> ReturnDecomposition:
        if not isinstance(time_horizon_days, int) or time_horizon_days <= 0:
            raise ValidationError("Time horizon must be positive integer")
        return self.attribution_calculator.decompose_return(
            self.holdings, self.weights, self.bond_analytics,
            self.parameters.calculation_date, time_horizon_days)
    
    def export_summary_dataframe(self) -> pd.DataFrame:
        summary_data = {
            'Metric': ['Portfolio Yield (%)', 'Modified Duration (years)', 'Weighted Average Life (years)', 'CR01 ($)', 'Portfolio Value ($)'],
            'ACF Method': [
                f"{self.acf_result.portfolio_yield * 100:.3f}", f"{self.acf_result.modified_duration:.3f}",
                f"{self.acf_result.weighted_average_life:.3f}", f"{self.risk_metrics.cr01:,.2f}",
                f"{self.risk_metrics.portfolio_value:,.2f}"],
            'WA Method': [
                f"{self.wa_result.portfolio_yield * 100:.3f}", f"{self.wa_result.modified_duration:.3f}",
                f"{self.wa_result.weighted_average_life:.3f}", 'N/A',
                f"{self.risk_metrics.portfolio_value:,.2f}"]
        }
        return pd.DataFrame(summary_data)
    
    def export_detailed_dataframe(self) -> pd.DataFrame:
        weight_lookup = {w.bond_id: w.weight for w in self.weights}
        detailed_data = [{
            'Bond ID': res.bond_id,
            'Weight (%)': f"{weight_lookup.get(res.bond_id, 0.0) * 100:.2f}",
            'YTM (%)': f"{res.yield_to_maturity * 100:.3f}",
            'Mod Duration': f"{res.modified_duration:.3f}",
            'Convexity': f"{res.convexity:.3f}",
            '# CFs': len(res.cash_flows)
        } for res in self.bond_analytics]
        return pd.DataFrame(detailed_data)

# ============================================================================
# EXAMPLE USAGE
# ============================================================================

if __name__ == "__main__":
    try:
        sample_holdings = [
            {'bond_id': 'CORP001', 'cusip': '12345678', 'isin': 'US1234567890', 'coupon_rate': 0.045, 'maturity_date': datetime(2030, 12, 15), 'issue_date': datetime(2020, 12, 15), 'par_amount': 1000000.0, 'payment_frequency': 2, 'day_count_convention': '30/360', 'currency': 'USD', 'country': 'US', 'clean_price': 98.75, 'accrued_interest': 1.125, 'market_date': datetime(2025, 6, 19)},
            {'bond_id': 'CORP002', 'cusip': '87654321', 'isin': 'US0987654321', 'coupon_rate': 0.0375, 'maturity_date': datetime(2028, 6, 30), 'issue_date': datetime(2018, 6, 30), 'par_amount': 1500000.0, 'payment_frequency': 2, 'day_count_convention': '30/360', 'currency': 'USD', 'country': 'US', 'clean_price': 102.25, 'accrued_interest': 0.9375, 'market_date': datetime(2025, 6, 19)}
        ]
        parameters = {'calculation_date': datetime(2025, 6, 19)}
        yield_curves = {'USD': {'tenors': [0.25, 0.5, 1, 2, 3, 5, 7, 10, 30], 'rates': [0.042, 0.043, 0.045, 0.046, 0.047, 0.048, 0.049, 0.05, 0.052], 'curve_date': datetime(2025, 6, 19)}}
        
        print("Initializing ETF Analytics Engine...")
        engine = ETFAnalyticsEngine(sample_holdings, parameters, yield_curves)
        analytics = engine.get_complete_analytics()
        
        print("\n" + "="*70 + "\nETF FIXED INCOME ANALYTICS RESULTS\n" + "="*70)
        print(f"Calculation Date: {analytics.calculation_date.strftime('%Y-%m-%d')}")
        print(f"Portfolio Value: ${analytics.risk_metrics.portfolio_value:,.2f}\n")
        
        print("SUMMARY TABLE:")
        print(engine.export_summary_dataframe().to_string(index=False))
        print("\nDETAILED BOND ANALYTICS:")
        print(engine.export_detailed_dataframe().to_string(index=False))
        
        print("\nRETURN DECOMPOSITION (30-day horizon):")
        return_decomp = engine.decompose_total_return(30)
        print(f"  Carry Return:        {return_decomp.carry_return*100:,.4f}%")
        print(f"  Roll Return:         {return_decomp.roll_return*100:,.4f}%")
        print(f"  Price Return:        {return_decomp.price_return*100:,.4f}%")
        print(f"  ------------------------------------")
        print(f"  Total Ex-Ante Return:{return_decomp.total_return*100:,.4f}%")
        
        print("\n" + "="*70 + "\nANALYSIS COMPLETED SUCCESSFULLY\n" + "="*70)
        
    except (ValidationError, CalculationError, ConvergenceError) as e:
        logger.error(f"Analytics failed: {e}", exc_info=True)
        print(f"\n❌ ERROR: {e}")
    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}", exc_info=True)
        print(f"\n❌ UNEXPECTED ERROR: {e}")
